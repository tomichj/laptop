#!/bin/bash

##
## Macintosh laptop setup script for developers
##

# consider checking for FDE instead of just enabling it.
# sudo fdesetup enable

function pause() {
  read -p "$*" -n1
}


fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\n$fmt\n" "$@"
}


set -e


brew_install_or_upgrade() {
  if brew_is_installed "$1"; then
    if brew_is_upgradable "$1"; then
      fancy_echo "Upgrading %s ..." "$1"
      brew upgrade "$@"
    else
      fancy_echo "Already using the latest version of %s. Skipping ..." "$1"
    fi
  else
    fancy_echo "Installing %s ..." "$1"
    brew install "$@"
  fi
}

brew_is_installed() {
  local name="$(brew_expand_alias "$1")"

  brew list -1 | grep -Fqx "$name"
}

brew_is_upgradable() {
  local name="$(brew_expand_alias "$1")"

  ! brew outdated --quiet "$name" >/dev/null
}

brew_tap() {
  brew tap "$1" 2> /dev/null
}

brew_expand_alias() {
  brew info "$1" 2>/dev/null | head -1 | awk '{gsub(/:/, ""); print $1}'
}

brew_launchctl_restart() {
  local name="$(brew_expand_alias "$1")"
  local domain="homebrew.mxcl.$name"
  local plist="$domain.plist"

  fancy_echo "Restarting %s ..." "$1"
  mkdir -p "$HOME/Library/LaunchAgents"
  ln -sfv "/usr/local/opt/$name/$plist" "$HOME/Library/LaunchAgents"

  if launchctl list | grep -Fq "$domain"; then
    launchctl unload "$HOME/Library/LaunchAgents/$plist" >/dev/null
  fi
  launchctl load "$HOME/Library/LaunchAgents/$plist" >/dev/null
}

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    fancy_echo "Updating %s ..." "$1"
    gem update "$@"
  else
    fancy_echo "Installing %s ..." "$1"
    gem install "$@"
    rbenv rehash
  fi
}


echo "Justin's Mac OS X Installation Script."
echo "This will install Apple's command line tools homebrew, homebrew cask, and a lot of software."
echo "Installs bash 4, changes your shell to it. I'd rather use zsh, but can't due to corporate interference."
echo "Install App Store apps manually later."
pause 'Ctrl-c to quit, or press any key to continue...'

echo "Checking to see if Apple Command Line Tools is installed. Will prompt for installation if not."
xcode-select -p 2>/dev/null
if [[ $? -ne 0 ]]; then
  echo "Wait while Apple Command Line Tools completes. Do not continue until installation is complete."
  xcode-select --install 2>/dev/null
  # read -p "One install is complete, press any key to continue... " -n1 -s
  pause 'Xcode command line tools install finished? Press any key to continue...'
fi


echo "Checking Homebrew"
if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
else
  fancy_echo "Homebrew already installed. Skipping ..."
fi

fancy_echo "Updating Homebrew formulas ..."
brew update

fancy_echo "Setting up latest bash"
brew_install_or_upgrade 'bash'
sudo bash -c "echo '/usr/local/bin/bash' >> /etc/shells"
chsh -s /usr/local/bin/bash

brew_install_or_upgrade 'openssl'
brew unlink openssl && brew link openssl --force

brew_install_or_upgrade 'git'
brew_install_or_upgrade 'imagemagick'
brew_install_or_upgrade 'qt'
brew_install_or_upgrade 'hub'
brew_install_or_upgrade 'libyaml'
brew_install_or_upgrade 'gnutls'
brew_install_or_upgrade 'tree'
brew_install_or_upgrade 'blueutil'
brew_install_or_upgrade 'gmp'
brew_install_or_upgrade 'imagemagick'
brew_install_or_upgrade 'wget'
brew_install_or_upgrade 'coreutils'
brew_install_or_upgrade 'findutils'
brew_install_or_upgrade 'z'
brew_install_or_upgrade 'grc'
brew_install_or_upgrade 'spark'


######################################################################
# ruby setup
brew_install_or_upgrade 'rbenv'
brew_install_or_upgrade 'ruby-build'

eval "$(rbenv init -)"

ruby_version="$(curl -sSL http://ruby.thoughtbot.com/latest)"
if ! rbenv versions | grep -Fq "$ruby_version"; then
  rbenv install -s "$ruby_version"
fi

rbenv global "$ruby_version"
rbenv shell "$ruby_version"

gem update --system

gem_install_or_update 'bundler'

fancy_echo "Configuring Bundler ..."
number_of_cores=$(sysctl -n hw.ncpu)
bundle config --global jobs $((number_of_cores - 1))

brew_install_or_upgrade 'heroku-toolbelt'


fancy_echo "Installing old rubys"
rbenv install -s 2.1.2
rbenv install -s 1.9.3-p547


############################################################################
# cask installs: apps, fonts, etc
brew_tap 'caskroom/cask'
brew_install_or_upgrade 'brew-cask'

fancy_echo "Installing core apps and utilities"
brew cask install dropbox 
brew cask install transmission
brew cask install firefox
brew cask install caffeine
brew cask install skype
brew cask install flux

brew cask install alfred
brew cask install keyboard-maestro
brew cask install superduper
brew cask install istat-menus
brew cask install textexpander
brew cask install viscosity
brew cask install fantastical

brew cask install vlc
brew cask install silverlight
brew cask install handbrake
brew cask install mplayerx
brew cask install plex-media-server

brew cask install the-unarchiver
brew cask install unrarx
brew cask install shades
brew cask install doxie
brew cask install diskmaker-x
brew cask install teleport
brew cask install switchaudio-osx

brew cask install --appdir="/Applications" google-chrome

fancy_echo "Installing editors"
brew cask install textmate
brew cask install bbedit
brew cask install sublime-text
brew cask install atom

fancy_echo "Installing development tools"
brew cask install rubymine 
brew cask install sourcetree
brew cask install diffmerge
brew cask install heroku-toolbelt
brew cask install github-desktop

brew cask install postgres
brew cask install pgadmin3
brew cask install razorsql
brew cask install boot2docker
brew cask install vagrant

fancy_echo "Installing homebrew completions"
brew tap homebrew/completions
brew install bash-completion docker-completion

fancy_echo "Installing quicklook plugins"
brew cask install qlcolorcode
brew cask install qlstephen
brew cask install qlmarkdown
brew cask install quicklook-json
brew cask install qlprettypatch
brew cask install quicklook-csv
brew cask install betterzipql
brew cask install webp-quicklook
brew cask install epubquicklook
qlmanage -r

fancy_echo "Installing fonts"
brew_tap 'caskroom/fonts'
brew cask install font-inconsolata
brew cask install font-source-code-pro

fancy_echo "Cleaning up homebrew caches, etc"
brew linkapps
brew cleanup
brew prune
brew cask cleanup


# dot files!
if [[ ! -d ~/.dotfiles ]]; then
  fancy_echo "Installing tomichj/dotfiles"
  git clone https://github.com/tomichj/dotfiles .dotfiles
  ~/.dotfiles/script/bootstrap
  ~/.dotfiles/bin/dot
fi



